# -*- coding: utf-8 -*-
"""xgboost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mlFElfN9yqywGYJU8Sj0pT02uP0RI0un
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns
import sklearn.preprocessing as preprocessing
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator, FormatStrFormatter

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

xtrain=pd.read_csv("/kaggle/input/preprocesssed/xtrain.csv")
ytrain=pd.read_csv("/kaggle/input/preprocesssed/ytrain.csv")
test=pd.read_csv("/kaggle/input/preprocesssed/xtest.csv")

import xgboost as xg

# xgb = xgboost.XGBClassifier(learning_rate=0.5,max_depth=5,n_estimators=5000,subsample=0.5,colsample_bytree=0.5,eval_metric='auc',verbosity=1)



from sklearn.model_selection import train_test_split

X_train, X_valid, Y_train, Y_valid = train_test_split(xtrain, ytrain, test_size=0.2)

eval_set = [(X_valid, Y_valid)]

xgb.fit(xtrain,ytrain,early_stopping_rounds=1,eval_set=eval_set,verbose=True)

ypred=xgb.predict(test)

test["isFraud"]=ypred
ypred=test["isFraud"]
ypred.to_csv("f(xgbTestboostViva).csv")
test=test.drop(['isFraud'],axis=1,inplace=False)

params={
 "learning_rate"    : [0.01, 0.03 , 0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ,0.40 ,0.50  ] ,
 "max_depth"        : [ 3, 4, 5, 6, 8, 10, 12, 15],
 "min_child_weight" : [ 1, 3, 5, 7 ],
 "gamma"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],
 "colsample_bytree" : [ 0.3, 0.4, 0.5 , 0.7 ]
    
}

from sklearn.model_selection import RandomizedSearchCV, GridSearchCV

classifier=xg.XGBClassifier()

random_search=RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)

def timer(start_time=None):
    if not start_time:
        start_time = datetime.now()
        return start_time
    elif start_time:
        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)
        tmin, tsec = divmod(temp_sec, 60)
        print('\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))

from datetime import datetime
# Here we go
start_time = timer(None) # timing starts from this point for "start_time" variable
random_search.fit(xtrain,ytrain)
timer(start_time) # timing ends here for "start_time" variable

random_search.best_estimator_

from sklearn.model_selection import train_test_split

X_train, X_valid, Y_train, Y_valid = train_test_split(xtrain, ytrain, test_size=0.4)

eval_set = [(X_valid, Y_valid)]

xgb = xg.XGBClassifier(base_score=0.5,colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.3, enable_categorical=False, gamma=0.2, gpu_id=-1, grow_policy='depthwise', interaction_constraints='',
              learning_rate=0.25, max_bin=256
             ,max_depth=15, max_leaves=0, min_child_weight=1, monotone_constraints='()', n_estimators=10000,
              n_jobs=0, num_parallel_tree=1, predictor='auto', random_state=0,
              reg_alpha=0, reg_lambda=1,eval_metric=['auc','logloss'],verbosity=1)

xgb.fit(X_train,Y_train,early_stopping_rounds=100,eval_set=eval_set,verbose=True)

ypred=xgb.predict(test)

test["isFraud"]=ypred
ypred=test["isFraud"]
ypred.to_csv("f(xgboost270).csv")
test=test.drop(['isFraud'],axis=1,inplace=False)

