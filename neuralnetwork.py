# -*- coding: utf-8 -*-
"""neuralnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f3KBsEGa-rpoPZL0ZIq73seatgwQnGEN

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns
import sklearn.preprocessing as preprocessing
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator, FormatStrFormatter

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
"""



import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns
import sklearn.preprocessing as preprocessing
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator, FormatStrFormatter

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

xtrain=pd.read_csv("/kaggle/input/preprocesssed/xtrain.csv")
ytrain=pd.read_csv("/kaggle/input/preprocesssed/ytrain.csv")
test=pd.read_csv("/kaggle/input/preprocesssed/xtest.csv")

from sklearn.preprocessing import StandardScaler  
scaler = StandardScaler()  
scaler.fit(xtrain)  
NN_X_train = scaler.transform(xtrain)  
NN_X_test = scaler.transform(test)

# from sklearn.neural_network import MLPClassifier
# NN_model = MLPClassifier(solver='lbfgs', alpha=1e-2,hidden_layer_sizes=(15, 12), random_state=1)
# NN_model.fit(xtrain, ytrain)
# ypred = NN_model.predict(test)

# test["isFraud"]=ypred
# ypred=test["isFraud"]
# ypred.to_csv("f(NN without scaling).csv")
# test=test.drop(['isFraud'],axis=1,inplace=False)

#SCALED

from sklearn.model_selection import RandomizedSearchCV
from sklearn.neural_network import MLPClassifier
def hyperparameter_tune(clf, parameters, iterations, X, y):
  randomSearch = RandomizedSearchCV(clf, param_distributions=parameters,scoring='roc_auc', n_jobs=-1, n_iter=iterations, cv=2) 
  randomSearch.fit(X,y)
  params = randomSearch.best_params_
  score = randomSearch.best_score_
  return params, score


parameters = {
    'solver': ['sgd', 'adam', 'lbfgs'],
    'activation': ['relu', 'tanh']
}
clf = MLPClassifier(batch_size=256, verbose=True, early_stopping=True)
parameters_after_tuning, score_after_tuning = hyperparameter_tune(clf, parameters, 20,NN_X_train , ytrain.values.ravel());
print(parameters_after_tuning)

from sklearn.neural_network import MLPClassifier
NN_model = MLPClassifier(solver='adam',activation='tanh',alpha=1e-2,hidden_layer_sizes=(15, 12), random_state=1)
NN_model.fit(NN_X_train, ytrain.values.ravel())
ypred = NN_model.predict(NN_X_test)



test["isFraud"]=ypred
ypred=test["isFraud"]
ypred.to_csv("f(NN scaled).csv")
test=test.drop(['isFraud'],axis=1,inplace=False)

